# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtGui import QFont
from PyQt5 import QtCore, QtWidgets
from generated.main_window_ui import Ui_MainWindow
from API.staff import get_staff_profile, get_staff_info, update_staff_info
from API.user_state import update_user_state
from PyQt5.QtWidgets import QWidget, QMainWindow
from generated.calendar_ui import Ui_calendar
from managers.TableEditors.User import UserEditor
from managers.Modification.User import user_show
from managers.TableEditors.Staff import staff_editor
from managers.Modification.Staff import staff_show
from managers.Show.Role import role_show
from managers.TableEditors.Role import role_editor
from managers.Show.Gender import gender_show
from managers.Show.Salary import salary_show
from managers.TableEditors.Salary import salary_editor
from managers.Show.Class_ import class_show
from managers.TableEditors.Subclass_information import subclass_description_editor
from managers.TableEditors.Subclass_price import subclass_price_editor
from managers.Show.Date_coefficient import date_coefficient_show
from managers.TableEditors.Date_coefficient import date_coefficient_editor
from managers.TableEditors.Directive import directive_editor
from managers.Show.Directive import directive_show
from managers.Show.Flights import flights_show
from managers.TableEditors.Flights import flights_editor


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, id_):
        super().__init__()
        self.date_from = None
        self.calendar_add_widget = None
        self.setupUi(self)
        self.id = id_
        self.widget_2.setHidden(True)
        self.home_sideboard.deleteLater()
        self.home_sideboard_2.deleteLater()
        self.stackedWidget.setCurrentIndex(1)
        self.state_no = 'No'
        self.data_base_sideboard.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        self.data_base_sideboard_2.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))

        self.settings_sideboard.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.settings_sideboard_2.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))

        self.info_sideboard.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
        self.info_sideboard_2.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))

        self.profile_sideboard.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(4))
        self.profile_sideboard_2.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(4))

        self.my_flights_sideboard.deleteLater()
        self.my_flights_sideboard_2.deleteLater()

        self.sign_out_sideboard.clicked.connect(self.out)
        self.sign_out_sideboard_2.clicked.connect(self.out)

        self.comboBox_2.addItems(["Классы билетов", "Пользователи", "Персонал", "Маршрут", "Авиакомпании",
                                  "Коэффициенты", "Безопасность", "Рейсы"])
        self.reset_selection()

        self.comboBox.activated[str].connect(self.show_data_box)

        self.comboBox_2.currentIndexChanged.connect(self.update_combo_box_2)

        self.btn_back_user.clicked.connect(self.back)
        self.btn_back_ticket.clicked.connect(self.back)
        self.btn_back_payment.clicked.connect(self.back)
        self.btn_back_flights.clicked.connect(self.back)
        self.btn_back_gender.clicked.connect(self.back)
        self.btn_back_salary.clicked.connect(self.back)
        self.btn_back_directive.clicked.connect(self.back)
        self.btn_back_info_company.clicked.connect(self.back)
        self.btn_back_info_passenger.clicked.connect(self.back)
        self.btn_back_info_staff.clicked.connect(self.back)
        self.btn_back_class.clicked.connect(self.back)
        self.btn_back_subclass.clicked.connect(self.back)
        self.btn_back_subclass_info.clicked.connect(self.back)
        self.btn_back_subclass_price.clicked.connect(self.back)
        self.btn_back_my_booking.clicked.connect(self.back)
        self.btn_back_status_flights.clicked.connect(self.back)
        self.btn_back_coefficient.clicked.connect(self.back)
        self.btn_back_role.clicked.connect(self.back)
        self.btn_back_registration_on_flight.clicked.connect(self.back)

        self.btn_search_user.clicked.connect(lambda: UserEditor.open_search(self))
        self.btn_insert_user.clicked.connect(lambda: UserEditor.open_add(self))
        self.btn_edit_user.clicked.connect(lambda: UserEditor.open_edit(self))
        self.btn_delete_user.clicked.connect(lambda: UserEditor.open_delete(self))

        self.btn_search_info_staff.clicked.connect(lambda: staff_editor.open_search_staff(self))
        self.btn_insert_info_staff.clicked.connect(lambda: staff_editor.open_add_staff(self))
        self.btn_edit_info_staff.clicked.connect(lambda: staff_editor.open_edit_staff(self))
        self.btn_delete_info_staff.clicked.connect(lambda: staff_editor.open_delete_staff(self))

        self.btn_insert_salary.clicked.connect(lambda: salary_editor.open_add_salary(self))
        self.btn_edit_salary.clicked.connect(lambda: salary_editor.open_edit_salary(self))
        self.btn_delete_salary.clicked.connect(lambda: salary_editor.open_delete_salary(self))

        self.btn_insert_role.clicked.connect(lambda: role_editor.open_add_role(self))
        self.btn_delete_role.clicked.connect(lambda: role_editor.open_delete_role(self))
        self.btn_edit_role.clicked.connect(lambda: role_editor.open_edit_role(self))

        self.btn_edit_subclass_info.clicked.connect(lambda: subclass_description_editor.open_edit_subclass_description(
            self))

        self.btn_edit_subclass_price.clicked.connect(lambda: subclass_price_editor.open_edit_subclass_price(
            self))

        self.btn_edit_coefficient.clicked.connect(lambda: date_coefficient_editor.open_edit_date_coefficient(self))
        self.btn_search_coefficient.clicked.connect(lambda: date_coefficient_editor.open_search_date_coefficient(self))

        self.btn_edit_flights.clicked.connect(lambda: flights_editor.open_edit_flights(self))
        self.btn_insert_flights.clicked.connect(lambda: flights_editor.open_add_flights(self))

        self.btn_search_directive.clicked.connect(lambda: directive_editor.open_search_directive(self))
        self.btn_insert_directive.clicked.connect(lambda: directive_editor.open_add_directive(self))
        self.btn_edit_directive.clicked.connect(lambda: directive_editor.open_edit_directive(self))
        self.btn_delete_directive.clicked.connect(lambda: directive_editor.open_delete_directive(self))

        self.pushButton.clicked.connect(self.show_calendar)
        self.btn_date_flight_buy_ticket.clicked.connect(self.show_calendar)
        self.btn_save.clicked.connect(self.user_data)
        self.table_properties(self.table_user)
        self.table_properties(self.table_info_staff)
        self.table_properties(self.table_role)
        self.table_properties(self.table_gender)
        self.table_properties(self.table_salary)
        self.table_properties(self.table_class)
        self.table_properties(self.table_subclass)
        self.table_properties(self.table_flights)
        self.table_properties(self.table_status_flights)
        self.table_properties(self.table_status_plane)
        self.table_properties(self.table_subclass_info)
        self.table_properties(self.table_subclass_price)
        self.table_properties(self.table_coefficient)
        self.table_properties(self.table_directive)
        self.data_display_functions = {
            "Сотрудники": (26, staff_show.show_data_staff),
            "Зарплата": (27, salary_show.show_data_salary),
            "Пользователи": (28, user_show.show_data_user),
            "Роль": (14, role_show.show_data_role),
            "Класс": (18, class_show.show_data_class),
            "Направление": (11, directive_show.show_data_directive),
            "Пол": (7, gender_show.show_data_gender),
            "Коэффициенты": (15, date_coefficient_show.show_data_date_coefficient),
            "Рейс": (22, flights_show.show_data_flights),
        }

    def out(self):
        from client.main import MyDialog
        self.close()
        update_user_state(self.id, self.state_no)
        self.dialog = MyDialog()
        self.dialog.show()

    def show_data_box(self):
        table_name = self.comboBox.currentText()
        data = self.data_display_functions.get(table_name)
        if data:
            index, display_function = data
            self.stackedWidget_4.setCurrentIndex(index)
            display_function(self)

    def update_combo_box_2(self):
        self.comboBox.clear()
        if self.comboBox_2.currentText() == "Рейсы":
            self.comboBox.addItems(["Рейс", "Выход", "Время посадки", "Статус рейса"])
        if self.comboBox_2.currentText() == "Клиенты":
            self.comboBox.addItems(["Пассажиры", "Оплата"])
        if self.comboBox_2.currentText() == "Пользователи":
            self.comboBox.addItems(["Пользователи"])
        if self.comboBox_2.currentText() == "Персонал":
            self.comboBox.addItems(["Сотрудники", "Зарплата"])
        if self.comboBox_2.currentText() == "Безопасность":
            self.comboBox.addItems(["Роль"])
        if self.comboBox_2.currentText() == "Воздушный транспорт":
            self.comboBox.addItems(["Самолет", "Статус самолета", "Производитель", "Регистрационный номер", "Модель"])
        if self.comboBox_2.currentText() == "Классы билетов":
            self.comboBox.addItems(["Класс", "Подкласс", "Описание подкласса", "Цена подкласса"])
        if self.comboBox_2.currentText() == "Билеты":
            self.comboBox.addItems(["Билет", "Место"])
        if self.comboBox_2.currentText() == "Маршрут":
            self.comboBox.addItems(["Направление", "Время", "Дата"])
        if self.comboBox_2.currentText() == "Авиакомпании":
            self.comboBox.addItems(["Авиакомпании", "Информация о авиакомпании"])
        if self.comboBox_2.currentText() == "Коэффициенты":
            self.comboBox.addItems(["Коэффициенты"])
        self.comboBox.setCurrentIndex(-1)

    def reset_selection(self):
        boxes = [self.comboBox, self.comboBox_2]
        for combobox in boxes:
            combobox.setCurrentIndex(-1)

    def clear_data_profile(self):
        self.line_name_2.clear()
        self.line_surname_2.clear()
        self.pushButton.setText('')
        self.line_phone_2.clear()
        self.radioButton.setAutoExclusive(False)
        self.radioButton.setChecked(False)
        self.radioButton.setAutoExclusive(True)
        self.radioButton_2.setAutoExclusive(False)
        self.radioButton_2.setChecked(False)
        self.radioButton_2.setAutoExclusive(True)

    def fill_data_profile(self):
        data = get_staff_profile(self.id)
        self.line_name_2.setText(data[0])
        self.line_surname_2.setText(data[1])
        self.line_phone_2.setText(data[2])
        self.pushButton.setText(data[3])
        if data[4] == 1:
            self.radioButton.setChecked(True)
        elif data[4] == 2:
            self.radioButton_2.setChecked(True)

    def user_data(self):
        name = self.line_name_2.text()
        surname = self.line_surname_2.text()
        phone = self.line_phone_2.text()
        date_birthday = self.pushButton.text()
        gender_text = 1 if self.radioButton.isChecked() else 2
        if hasattr(self, 'date_birthday') and self.date_birthday:
            id_gender = int(gender_text)
            staff = get_staff_info(name, surname, date_birthday, phone, id_gender, self.id)
            if not staff:
                update_staff_info(name, surname, date_birthday, phone, id_gender, self.id)
            else:
                print("данные не изменены")

    def show_calendar(self):
        self.calendar_add_widget = CalendarAddWidget()
        self.calendar_add_widget.calendarWidget.clicked[QtCore.QDate].connect(self.set_date_on_button)
        self.calendar_add_widget.show()

    def back(self):
        cur_idx = self.stackedWidget_4.currentIndex()
        if cur_idx > 0:
            self.stackedWidget_4.setCurrentIndex(0)
            self.reset_selection()

    def set_date_on_button(self, date):
        self.date_from = date.toString("yyyy-MM-dd")
        self.btn_date_flight_buy_ticket.setText(self.date_from)
        self.btn_date_flight_buy_ticket_return.setText(self.date_from)
        self.pushButton.setText(self.date_from)

    @staticmethod
    def table_properties(table):
        if isinstance(table, QTableWidget):
            table.horizontalHeader().setStretchLastSection(True)
            table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            table.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Fixed)
            table.verticalHeader().setVisible(False)
            table.horizontalHeader().setDefaultSectionSize(100)
            table.horizontalHeader().setFont(QFont("Arial", 14))


class CalendarAddWidget(QWidget, Ui_calendar):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
